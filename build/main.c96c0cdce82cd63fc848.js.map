{"version":3,"sources":["webpack:///./promisification/promisification.js","webpack:///./promisification/task-2.js","webpack:///./promisification/task-3.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","logSuccess","id","logError","warn","makeTransaction","min","max","Math","floor","random","amount"],"mappings":"qKAAMA,EAAQ,SAACC,GAMb,OALgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACTF,EAAQF,KACPA,OAKDK,EAAS,SAACC,GAAD,OAAUC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGzBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,kCCdXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAOjC,OANsB,IAAId,SAAQ,SAACC,EAASC,GAI1CD,EAHqBY,EAASE,KAAI,SAACC,GAAD,OAChCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAQ7DZ,EAAS,SAACa,GAAD,OAAkBX,QAAQY,MAAMD,IAW/CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC9BnC,IAIMe,EAAa,SAAC,GAAkB,IAAhBC,EAAgB,EAAhBA,GAAItB,EAAY,EAAZA,MACxBQ,QAAQC,IAAR,eAA2Ba,EAA3B,iBAA8CtB,EAA9C,OAGIuB,EAAW,SAACD,GAChBd,QAAQgB,KAAR,gCAA6CF,EAA7C,+BAGIG,EAAkB,SAAC,GAAW,IAATH,EAAS,EAATA,GAazB,OAZ2B,IAAIpB,SAAQ,SAACC,EAASC,GAC/C,IAd+BsB,EAAKC,EAc9B3B,GAdyB0B,EAcS,IAdJC,EAcS,IAbxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAclDrB,YAAW,WACUuB,KAAKE,SAAW,GAGjC3B,EAAQ,CAAEmB,KAAItB,UAEdI,EAAOkB,KAERtB,OAePyB,EAAgB,CAAEH,GAAI,GAAIS,OAAQ,MAAOrB,KAAKW,GAA9C,MAAgEE,GAEhEE,EAAgB,CAAEH,GAAI,GAAIS,OAAQ,MAAOrB,KAAKW,GAA9C,MAAgEE,GAEhEE,EAAgB,CAAEH,GAAI,GAAIS,OAAQ,KAAMrB,KAAKW,GAA7C,MAA+DE,GAE/DE,EAAgB,CAAEH,GAAI,GAAIS,OAAQ,MAAOrB,KAAKW,GAA9C,MAAgEE,K","file":"main.c96c0cdce82cd63fc848.js","sourcesContent":["const delay = (ms) => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n  return promise;\r\n};\r\n\r\nconst logger = (time) => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","const users = [\r\n  { name: \"Mango\", active: true },\r\n  { name: \"Poly\", active: false },\r\n  { name: \"Ajax\", active: true },\r\n  { name: \"Lux\", active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const promiseToggle = new Promise((resolve, reject) => {\r\n    const updatedUsers = allUsers.map((user) =>\r\n      user.name === userName ? { ...user, active: !user.active } : user\r\n    );\r\n    resolve(updatedUsers);\r\n  });\r\n  return promiseToggle;\r\n  //   callback(updatedUsers);\r\n};\r\n\r\nconst logger = (updatedUsers) => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n// toggleUserState(users, \"Mango\", logger);\r\n// toggleUserState(users, \"Lux\", logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, \"Mango\").then(logger);\r\ntoggleUserState(users, \"Lux\").then(logger);\r\n","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst logSuccess = ({ id, delay }) => {\r\n  console.log(`Transaction ${id} processed in ${delay}ms`);\r\n};\r\n\r\nconst logError = (id) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later. `);\r\n};\r\n\r\nconst makeTransaction = ({ id }) => {\r\n  const pormiseTransaction = new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve({ id, delay });\r\n      } else {\r\n        reject(id);\r\n      }\r\n    }, delay);\r\n  });\r\n  return pormiseTransaction;\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}